name: Revalidate
on:
  issues:
    types: ["opened", "edited", "labeled", "deleted", "closed", "reopened"]
  push:
    branches: ["main", "master"]
  label:
env:
  CI: true
jobs:
  Revalidate:
    timeout-minutes: 15
    runs-on: ubuntu-latest
    steps:
      - name: checkout code repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: setup node.js
        uses: actions/setup-node@v2
        with:
          node-version: 16
      - uses: pnpm/action-setup@v2
        name: Install pnpm
        id: pnpm-install
        with:
          run_install: false
      - name: get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
      - uses: actions/cache@v3
        name: setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - name: install dependencies
        run: pnpm install --frozen-lockfile=false
      - name: revalidate
        uses: actions/github-script@v6
        env:
          AUTH_TOKEN: ${{ secrets.AUTH_TOKEN }}
        with:
          script: |
            // revalidate `/issues` page
            const { $fetch } = require('ohmyfetch')
            // vercel.app -> revalidate on preview/test host
            // jwx.ink -> revalidate on production with custom host
            const hosts = ['jwx.vercel.app', 'jwx.ink']
            hosts.map(host => {
              console.log(`revalidate ${host}`)
              $fetch(`https://${host}/api/revalidate`, { headers: { 'x-auth-token': process.env.AUTH_TOKEN } })
                .then(res => {
                  console.log(res)
                })
              if (context.issue.number) {
                $fetch(`https://${host}/api/revalidate?issue_number=${context.issue.number}`, { headers: { 'x-auth-token': process.env.AUTH_TOKEN } })
                  .then(res => {
                    console.log(res)
                  })
              }
            })
        
